<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_cfac.ChallengeFactoryUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ChallengeFactoryUtils</name>
        <script><![CDATA[var ChallengeFactoryUtils = Class.create();
ChallengeFactoryUtils.prototype = {
    initialize: function() {},
    // getRandomRecord choose random record and returns value of selected field
    // parameter columnName choose the value from record
    // parameter recordTable is choose the table in The Platform
    // example: this.getRandomRecord('sys_id','sys_user'); return sys_id of random record (user) form sys_user table
    getRandomRecord: function(columnName, recordTable) {
        var rec = new GlideRecord(recordTable);
        var randomRec = Math.floor(Math.random() * rec.getRowCount()) + 1;
        rec.chooseWindow(randomRec, randomRec + 1);
        rec.query();
        rec.next();
        return rec.getValue(columnName);
    },

    fixChallengeAdmin: function() {
        var gr = new GlideRecord("sys_user");
        gr.query("user_name", "challenge.admin");
        gr.query();
        var doUpdate = true;
        if (!gr.next()) {
            gr.initialize();
			gr.user_name="challenge.admin";
            doUpdate = false;
        }
        gr.first_name = "Challenge";
        gr.last_name = "Admin";
        gr.user_password.setDisplayValue("Zp(70fH0*1ET");
        if (doUpdate) {
            gr.update();
        } else {
            gr.insert();
        }
    },

    createEmail: function(direct, from, subject, body_text, sys_attachment, name, url) {
        gs.info("[CFAC] Calling depracted function createEmail. No emails was created");

    },

    initGame: function(name, email, location, team, gameStatusId) {
        var response = [];
        var grGameStatus = new GlideRecord('x_snc_cfac_game_status');
        if (gameStatusId == "") {
            grGameStatus.team = team;
            grGameStatus.insert();
            gameStatusId = grGameStatus.sys_id;
            response.push(grGameStatus.sys_id);
        } else {
            grGameStatus.get(gameStatusId);
            grGameStatus.team = team;
            grGameStatus.update();
            response.push(grGameStatus.sys_id);
        }

        var grPlayerStatus = new GlideRecord('x_snc_cfac_player_status');
        grPlayerStatus.addQuery('game_status', 'new');
        grPlayerStatus.addQuery('player_user', gs.getUserID());
        grPlayerStatus.query();
        if (grPlayerStatus.next()) {
            grPlayerStatus.player_name = name;
            grPlayerStatus.email = email;
            grPlayerStatus.location = location;
            grPlayerStatus.game_status_reference = gameStatusId;
            //grPlayerStatus.player_user=gs.getUserID();
            grPlayerStatus.update();
        } else {
            grPlayerStatus.player_name = name;
            grPlayerStatus.email = email;
            grPlayerStatus.location = location;
            grPlayerStatus.game_status_reference = gameStatusId;
            grPlayerStatus.player_user = gs.getUserID();
            grPlayerStatus.insert();
        }
        response.push(grPlayerStatus.sys_id);
        return response;
    },


    saveScore3: function(scoreEvent, sys_user) {
        var grPlayerStatus = new GlideRecord('x_snc_cfac_player_status');
        if (!sys_user) {
            sys_user = gs.getUserID();
        }
        grPlayerStatus.addQuery('player_user', sys_user);
        grPlayerStatus.addQuery('game_status', 'registered');
        grPlayerStatus.addQuery('game_status_reference.game_status', 'running');
        grPlayerStatus.query();
        if (grPlayerStatus.getRowCount() > 1) {
            gs.warn("[CFAC] There is more than one running game.");
        }
        if (grPlayerStatus.next()) {
            var grScore = new GlideRecord('x_snc_cfac_score_configuration');
            grScore.addQuery('score_event_name', scoreEvent);
            grScore.query();
            if (grScore.getRowCount() > 1) {
                gs.warn("[CFAC] There is more than one score event: " + scoreEvent);
            } else {
                if (grScore.next()) {
                    var newScore = new GlideRecord('x_snc_cfac_scores');
                    newScore.score = grScore.score;
                    newScore.domain_skill = grScore.domain_skill;
                    newScore.servicenow_skill = grScore.servicenow_skill;
                    newScore.task_category = grScore.task_category;
                    newScore.player_status = grPlayerStatus.sys_id;
                    newScore.game_status = grPlayerStatus.game_status_reference;
                    newScore.player = grPlayerStatus.uid;
                    newScore.game_server = grPlayerStatus.game_status_reference.server_game_id;
                    newScore.insert();
                }
            }
        } else {
            gs.info("[CFAC] Score was not stored. No running game. Score event: " + scoreEvent);
            //no runnning game or user is not registered possibly admin?
        }

    },

    saveScore4: function(playerStatusID, scoreData) {

        if (!playerStatusID) {
            gs.error('[CFAC] saveScore4 called without a Player Status Sys ID.');
            return 0;
        }

        if (!scoreData) {
            gs.error('[CFAC] saveScore4 called without a score data object.');
            return 0;
        }

        var playerStatus = new GlideRecord('x_snc_cfac_player_status');

        if (!playerStatus.get(playerStatusID)) {
            gs.error('[CFAC] saveScore4 failed to find player status by sys_id: ' + playerStatusID);
            return 0;
        }

        if ((!playerStatus.game_status) || (playerStatus.game_status != 'registered')) {
            gs.error('[CFAC] No registered game for ' + playerStatusID + ' score ignored');
            return 0;
        }

        if ((!playerStatus.game_status_reference.game_status) || (playerStatus.game_status_reference.game_status != 'running')) {
            gs.warn('[CFAC] No running game for ' + playerStatusID + ' score ignored');
            return 0;
        }

        var newScore = new GlideRecord('x_snc_cfac_scores');
        newScore.initialize();
        newScore.player_status = playerStatusID;
        newScore.game_status = playerStatus.game_status_reference;
        newScore.player = playerStatus.uid;
        newScore.game_server = playerStatus.game_status_reference.server_game_id;

        var scoreKeys = Object.keys(scoreData);

        for (kNum = 0; kNum < scoreKeys.length; kNum++) {
            var thisKey = scoreKeys[kNum];
            newScore[thisKey] = scoreData[thisKey];
        }

        var scoreInserted = newScore.insert();

        if (!scoreInserted) {
            gs.error('[CFAC] Error: saveScore4 failed to insert score.');
        }

        return scoreInserted;
    },




    getActiveGame: function() { //deprecated!!!!
        gs.warn("[CFAC] USING DEPRACTED FUNCTION getActiveGame() This mothod does not support multiplayer!!!!");
        var gameStatus = new GlideRecord('x_snc_cfac_player_status');
        gameStatus.addQuery('u_game_status', 'obstacles planned');
        gameStatus.query();

        if (gameStatus.getRowCount() == 0) {
            gs.info("[CFAC] Error: There is no game record that has started!!!");
        }
        if (gameStatus.getRowCount() > 1) {
            gs.info("[CFAC] Warning: There is more than one running game!");
        }
        if (gameStatus.next()) {
            return gameStatus;
        } else {
            return null;
        }
    },


    sendConnectMessage: function(message, groupProfile, toProfile, fromProfile) {
        gs.warn("[CFAC] USING DEPRACTED FUNCTION getActiveGame() This mothod does not support multiplayer!!!!");
        if (!groupProfile) {
            groupProfile = 'ed5f59dbdb17c7001be0f8ecbf961963'; // Security, Howard
        }
        if (!toProfile) {

            toProfile = '50dbf5c6db9b07001be0f8ecbf96198a'; // Security Ninja
        }
        if (!fromProfile) {
            fromProfile = '883f51dbdb17c7001be0f8ecbf96197e'; // Howard Johnson
        }
        var live_message = new global.LiveFeedMessage();
        live_message.initialize();

        gs.info('[CFAC] Sending Connect Message: ' + groupProfile + ' - ' + toProfile + ' - ' + fromProfile);

        var messageRecordId = live_message._postMessage(message, groupProfile, toProfile, false, fromProfile);
        // See Script Include "LiveFeedMessage"
        //   _postMessage: function(message, group_id, to_profile, isWorkNotes, from_profile){

        if (message == 'File: SealOfApproval.jpg') {
            var gsa = new GlideSysAttachment();
            gsa.copy('live_message', '17cce2abdbdfc7001be0f8ecbf96193d', 'live_message', messageRecordId); //FIXME

            var live_message2 = new GlideRecord('live_message');
            if (live_message2.get(messageRecordId)) {
                live_message2.has_attachments = true;
                live_message2.update();
            }
        }

        return messageRecordId;
    },

    getPlayerStatusFromUserIDandGameStatus: function(userID, gameStatus) {

        if (!userID) {
            gs.error('[CFAC] getPlayerStatus.. called without a userID arg');
            return '';
        }

        if (!gameStatus) {
            gs.error('[CFAC] getPlayerStatus.. called without a gameStatus arg');
            return '';
        }

        var playerStatus = new GlideRecord('x_snc_cfac_player_status');
        playerStatus.addQuery('player_user', userID);
        playerStatus.addQuery('game_status_reference', gameStatus);
        playerStatus.query();

        if (playerStatus.next()) {
            return playerStatus.sys_id;
        } else {
            gs.error('[CFAC] getPlayerStatus.. was unable to find a playerStatus');

            // Try to find any player as a fallback
            playerStatus = new GlideRecord('x_snc_cfac_player_status');
            playerStatus.addQuery('game_status_reference', gameStatus);
            playerStatus.query();

            if (playerStatus.next()) {
                gs.warn('[CFAC] Warning: getPlayerStatus.. blindly pulling a playerStatus after lookup failure');
                return playerStatus.sys_id;
            } else {
                gs.error('[CFAC] Error: getPlayerStatus.. failed to blindly pull a playerStatus after lookup failure');
                return '';
            }
        }
    },



    clearPlayers: function() {
        var gr = new GlideRecord("x_snc_cfac_players");
        gr.setWorkflow(false); //Don't fire Business rule,notifications
        gr.deleteMultiple();
    },

    clearEventQueue: function(name, parm2) {
        var gr = new GlideRecord("sysevent");
        gr.addQuery("name", name);
        if (parm2) {
            gr.addQuery("parm2", parm2);
        }
        //gr.setWorkflow(false); //Don't fire Business rule,notifications
        gr.deleteMultiple();
    },

    setEventQueueasProcessed: function(name, parm2) {
        var gr = new GlideRecord("sysevent");
        gr.addQuery("name", name);
        if (parm2) {
            gr.addQuery("parm2", parm2);
        }
        gr.query();
        while (gr.next()) {
            gr.state = "processed";
            gr.update();
        }
        //gr.setWorkflow(false); //Don't fire Business rule,notifications
        //gr.deleteMultiple();
    },

    clearScoreBoard: function() {
        var gr = new GlideRecord("x_snc_cfac_scores");
        gr.setWorkflow(false); //Don't fire Business rule,notifications
        gr.deleteMultiple();
    },

    clearScoreBoardClient: function() {
        var gr = new GlideRecord("x_snc_cfac_scores");
        gr.addQuery("client_upload", "false");
        gr.setWorkflow(false); //Don't fire Business rule,notifications
        gr.deleteMultiple();
    },

    clearConnectMessages: function() {
        var gr = new GlideRecord("live_message");
        gr.addQuery("sys_id", "!=", "17cce2abdbdfc7001be0f8ecbf96193d"); //messege with seal
        gr.setWorkflow(false); //Don't fire Business rule,notifications
        gr.deleteMultiple();
    },

    deleteAllOtherGames: function(activeGameId) {
        var gr = new GlideRecord("x_snc_cfac_game_server");
        gr.addQuery('sys_id', '!=', activeGameId.sys_id);
        gr.setWorkflow(false); //Don't fire Business rule,notifications
        gr.deleteMultiple();
    },

    clearVulnerabilityGroup: function() {
        var gr = new GlideRecord("sn_vul_vulnerability");
        gr.addQuery("created_by", "df2c6889db17c30051717c841f9619d1"); //FIXME
        gr.setWorkflow(false); //Don't fire Business rule,notifications
        gr.deleteMultiple();
    },

    checkRunningGames: function() {
        var gr = new GlideRecord("x_snc_cfac_game_server");
        gr.addQuery("game_status", '!=', "finished");
        gr.query();
        if (gr.getRowCount() > 0) {
            return true;
        } else {
            return false;
        }

    },

    resetPlayerOptions: function(playerStatusId) {
        var gr = new GlideRecord("x_snc_cfac_player_status");
        gr.get(playerStatusId);
        gr.player_name = "";
        gr.email = "";
        gr.team = "";
        gr.country = "";
        gr.location = "";
        gr.game_configuration = "";
        gr.game_status = "new game";
        gr.game_start = "";
        gr.game_stop = "";
        gr.uid = "";
        gr.server_game_id = "";
        gr.server_game_name = "";

        gr.update();
    },

    getRemTime: function(incidentGR) {
        if (!incidentGR) {
            gs.error('[CFAC] Error: getRemTime called with no incident object');
            return '';
        }
        if (!incidentGR.sys_created_on) {
            gs.error('[CFAC] Error: getRemTime called with no record.sys_created_on');
            return '';
        }
        if (!incidentGR.closed_at) {
            gs.error('[CFAC] Error: getRemTime called with no record.closed_at');
            return '';
        }

        var startTime = new GlideDateTime(incidentGR.sys_created_on);
        var endTime = new GlideDateTime(incidentGR.closed_at);
        var remTimeMS = GlideDateTime.subtract(startTime, endTime);

        return remTimeMS;
    },


    lookForOpenVulnerability: function(cmdb_ci, vulID) {

        // PORTED from ChallengeFactoryUtilsinVR

        var vulCVE = new GlideRecord("sn_vul_nvd_entry");
        vulCVE.addQuery("id", vulID);
        vulCVE.query();
        if (vulCVE.next()) {
            var gr = new GlideRecord("sn_vul_vulnerable_item");
            gr.addQuery("vulnerability", vulCVE.sys_id);
            gr.addQuery("cmdb_ci", cmdb_ci);
            gr.addQuery("state", "!=", "101");
            gr.addQuery("state", "!=", "12");
            gr.addQuery("state", "!=", "3");
            gr.query();
            if (gr.getRowCount() > 0) {
                return true;
            } else {
                return false;
            }
        } else {
            gs.info("[CFAC] Cannot find " + vulID + " record!");
            return -1;
        }

    },


    clearIncidents: function() {
        var gr = new GlideRecord("sn_si_incident");
        gr.setWorkflow(false); //Don't fire Business rule,notifications
        gr.deleteMultiple();
    },


    createGameData: function(gameData) {
        if (!gameData) {
            gs.error('[CFAC] Error: createGameData called without an argument');
            return 0;
        }

        if (!gameData.key) {
            gs.error('[CFAC] Error: createGameData called without a key');
            return 0;
        }

        if (!gameData.value) {
            gs.error('[CFAC] Error: createGameData called without a value');
            return 0;
        }

        if (!gameData.game_status) {
            gs.error('[CFAC] Error: createGameData called without a game_status');
            return 0;
        }

        var gd = new GlideRecord('x_snc_cfac_game_data');
        gd.initialize();
        gd.key = gameData.key;
        gd.value = gameData.value;
        gd.game_status = gameData.game_status;

        if (gameData.player_status) gd.player_status = gameData.player_status;
        if (gameData.data_table) gd.data_table = gameData.data_table;
        if (gameData.data_record) gd.data_record = gameData.data_record;

        if (gd.insert()) {
            return gd;
        } else {
            return 0;
        }
    },

    connectPhishingGameData: function(sir_id) {
        var grMail = new GlideRecord('sys_email');
        grMail.addQuery('instance', sir_id);
        grMail.addQuery('mailbox', 'received');
        grMail.addQuery('state', 'processed');
        grMail.query();
        if (grMail.next()) {
            var gd = new GlideRecord('x_snc_cfac_game_data');
            gd.addQuery('key', 'phishing_data');
            gd.addQuery('data_record', grMail.sys_id);
            gd.query();
            if (gd.next()) {
                gd.data_record = sir_id;
                gd.update();
            } else {
                gs.warn("[CFAC]: Cannot reconnect Game Data in phishing incident. Game data was not found");
            }
        } else {
            gs.warn("[CFAC]: Cannot reconnect Game Data in phishing incident. Triggering mail was not found");
        }
    },

    updateGameData: function(gameData) {
        if (!gameData) {
            gs.error('[CFAC] Error: updateGameData called without an argument');
            return 0;
        }

        if (!gameData.key) {
            gs.error('[CFAC] Error: updateGameData called without a key');
            return 0;
        }

        if (!gameData.value) {
            gs.error('[CFAC] Error: updateGameData called without a value');
            return 0;
        }

        if (!gameData.game_status) {
            gs.error('[CFAC] Error: updateGameData called without a game_status');
            return 0;
        }

        var gd = new GlideRecord('x_snc_cfac_game_data');
        gd.addQuery('key', gameData.key);
        gd.addQuery('game_status', gameData.game_status);

        if (gameData.data_table) gd.addQuery('data_table', gameData.data_table);
        if (gameData.data_record) gd.addQuery('data_record', gameData.data_record);
        gd.query();

        if (gd.hasNext()) {
            while (gd.next()) {
                gd.value = gameData.value;
                gd.update();
            }
            return 1;
        } else {
            gs.warn('[CFAC] Warning: updateGameData called and found no matching game data records ');
            return 0;
        }
    },

    deleteGameData: function(gameData) {
        if (!gameData) {
            gs.error('[CFAC] Error: deleteGameData called without an argument');
            return 0;
        }

        if (!gameData.game_status) {
            gs.error('[CFAC] Error: deleteGameData called without a game_status');
            return 0;
        }

        var gd = new GlideRecord('x_snc_cfac_game_data');
        gd.addQuery('game_status', gameData.game_status);

        if (gameData.player_status) gd.addQuery('player_status', gameData.player_status);
        if (gameData.data_table) gd.addQuery('data_table', gameData.data_table);
        if (gameData.data_record) gd.addQuery('data_record', gameData.data_record);
        if (gameData.key) gd.addQuery('key', gameData.key);
        if (gameData.value) gd.addQuery('value', gameData.value);
        gd.deleteMultiple();
    },

    getGameData: function(gameData) {
        if (!gameData) {
            gs.error('[CFAC] Error: getGameData called without an argument');
            return 0;
        }

        if (!gameData.key) {
            gs.error('[CFAC] Error: getGameData called without a key');
            return 0;
        }

        var gd = new GlideRecord('x_snc_cfac_game_data');
        gd.addQuery('key', gameData.key);

        if (gameData.game_status) gd.addQuery('game_status', gameData.game_status);
        if (gameData.data_table) gd.addQuery('data_table', gameData.data_table);
        if (gameData.data_record) gd.addQuery('data_record', gameData.data_record);
        gd.query();

        if (gd.hasNext()) {
            gd.next();
            return gd;
        } else {
            return 0;
        }
    },

    getGameStatusGR: function(recordSysID) {
        if (!recordSysID) {
            gs.error('[CFAC] Error: getGameStatus called with no arguments');
            return 0;
        }
        var gameData = new GlideRecord('x_snc_cfac_game_data');
        gameData.addQuery('data_record', recordSysID);
        gameData.addQuery('game_status', '!=', '');
        gameData.chooseWindow(0, 1);
        gameData.query();

        if (!gameData.hasNext()) {
            gs.error('[CFAC] Error: getGameStatus failed to find');
            return 0;

        }

        gameData.next();

        var gameStatusSysID = gameData.game_status;

        if (!gameStatusSysID) {
            gs.error('[CFAC] Error: getGameStatus had unexpectedly null Game Status sys_id');
            return 0;
        }

        var gameStatus = new GlideRecord('x_snc_cfac_game_status');
        gameStatus.get(gameStatusSysID);

        return gameStatus;
    },


    getRandomRFC1918: function() {
        var prefixArray = ["192.168", "10", "172"];
        var prefix = prefixArray[Math.floor(Math.random() * 3)];
        var ip = "";
        if (prefix == "192.168") {
            ip = prefix + "." + (Math.floor(Math.random() * 254) + 1) + "." + (Math.floor(Math.random() * 254) + 1);
        }
        if (prefix == "10") {
            ip = prefix + "." + (Math.floor(Math.random() * 254) + 1) + "." + (Math.floor(Math.random() * 254) + 1) + "." + (Math.floor(Math.random() * 254) + 1);
        }
        if (prefix == "172") {
            ip = prefix + "." + (Math.floor(Math.random() * 16) + 16) + "." + (Math.floor(Math.random() * 254) + 1) + "." + (Math.floor(Math.random() * 254) + 1);
        }
        return ip;
    },


    type: 'ChallengeFactoryUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>alex.cox</sys_created_by>
        <sys_created_on>2018-10-30 21:25:44</sys_created_on>
        <sys_id>6c9f3f58db616300b8fef4a51f9619a6</sys_id>
        <sys_mod_count>74</sys_mod_count>
        <sys_name>ChallengeFactoryUtils</sys_name>
        <sys_package display_value="Challenge Factory" source="x_snc_cfac">23163d33db512f4070bc54b4ce96199f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Challenge Factory">23163d33db512f4070bc54b4ce96199f</sys_scope>
        <sys_update_name>sys_script_include_6c9f3f58db616300b8fef4a51f9619a6</sys_update_name>
        <sys_updated_by>martin.meduna</sys_updated_by>
        <sys_updated_on>2020-11-11 15:13:28</sys_updated_on>
    </sys_script_include>
</record_update>
